name: Build

on: [push, pull_request]

permissions:
  contents: read

jobs:
  build:
    name: PHP ${{ matrix.php-versions }} - OS ${{ matrix.operating-system }}
    runs-on: ${{ matrix.operating-system }}
    
    # Docs: https://docs.github.com/en/actions/using-containerized-services
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: database
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: false
      matrix:
        operating-system: ['ubuntu-latest']
        php-versions: ["5.4", "5.5", "5.6", "7.0"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Docs: https://github.com/shivammathur/setup-php
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          coverage: none
          extensions: sockets, bz2, mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Run Migration
        run: |
          composer require --dev symfony/orm-pack
          php bin/console doctrine:schema:update --force || echo "No migrations found or schema update failed"
          php bin/console doctrine:migrations:migrate || echo "No migrations found or migration failed"
        env:
          DATABASE_URL: mysql://root:password@127.0.0.1:${{ job.services.mysql.ports['3306'] }}/database

      - name: Install PHPUnit
        run: simple-phpunit install

      - name: Run tests
        env:
          SYMFONY_ENV: test
          CLAMSCAN_BIN: "/usr/bin/clamdscan"
          COMPOSER_DISABLE_XDEBUG_WARN: 1
        run: simple-phpunit --coverage-text

        #run: ./bin/phpunit
        #run: vendor/bin/phpunit
